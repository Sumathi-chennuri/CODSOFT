{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPk5VEUV5zaw7r3DeH9BCLc",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sumathi-chennuri/CODSOFT/blob/main/TASK_2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "SHzHBNlASmya",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "a071d165-e181-4bed-8a51-e84d3b8d3020"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  |   |  \n",
            "-----\n",
            "  |   |  \n",
            "-----\n",
            "  |   |  \n",
            "-----\n",
            "Your turn (X):\n",
            "Enter row and column (0, 1, 2): 1 1\n",
            "  |   |  \n",
            "-----\n",
            "  | X |  \n",
            "-----\n",
            "  |   |  \n",
            "-----\n",
            "AI's turn (O):\n",
            "O |   |  \n",
            "-----\n",
            "  | X |  \n",
            "-----\n",
            "  |   |  \n",
            "-----\n",
            "Your turn (X):\n",
            "Enter row and column (0, 1, 2): 0 1\n",
            "O | X |  \n",
            "-----\n",
            "  | X |  \n",
            "-----\n",
            "  |   |  \n",
            "-----\n",
            "AI's turn (O):\n",
            "O | X |  \n",
            "-----\n",
            "  | X |  \n",
            "-----\n",
            "  | O |  \n",
            "-----\n",
            "Your turn (X):\n",
            "Enter row and column (0, 1, 2): 1 0\n",
            "O | X |  \n",
            "-----\n",
            "X | X |  \n",
            "-----\n",
            "  | O |  \n",
            "-----\n",
            "AI's turn (O):\n",
            "O | X |  \n",
            "-----\n",
            "X | X | O\n",
            "-----\n",
            "  | O |  \n",
            "-----\n",
            "Your turn (X):\n",
            "Enter row and column (0, 1, 2): 2 0\n",
            "O | X |  \n",
            "-----\n",
            "X | X | O\n",
            "-----\n",
            "X | O |  \n",
            "-----\n",
            "AI's turn (O):\n",
            "O | X | O\n",
            "-----\n",
            "X | X | O\n",
            "-----\n",
            "X | O |  \n",
            "-----\n",
            "Your turn (X):\n",
            "Enter row and column (0, 1, 2): 2 2\n",
            "O | X | O\n",
            "-----\n",
            "X | X | O\n",
            "-----\n",
            "X | O | X\n",
            "-----\n",
            "It's a tie!\n"
          ]
        }
      ],
      "source": [
        "import random\n",
        "# Constants\n",
        "PLAYER_X = 'X'\n",
        "PLAYER_O = 'O'\n",
        "EMPTY = ' '\n",
        "# Function to print the board\n",
        "def print_board(board):\n",
        "    for row in board:\n",
        "        print(' | '.join(row))\n",
        "        print('-' * 5)\n",
        "# Check if the current player has won\n",
        "def check_win(board, player):\n",
        "    # Check rows, columns, and diagonals\n",
        "    for i in range(3):\n",
        "        if all([board[i][j] == player for j in range(3)]) or \\\n",
        "           all([board[j][i] == player for j in range(3)]):\n",
        "            return True\n",
        "    if board[0][0] == player and board[1][1] == player and board[2][2] == player:\n",
        "        return True\n",
        "    if board[0][2] == player and board[1][1] == player and board[2][0] == player:\n",
        "        return True\n",
        "    return False\n",
        "\n",
        "# Check if the board is full\n",
        "def is_full(board):\n",
        "    return all(board[i][j] != EMPTY for i in range(3) for j in range(3))\n",
        "\n",
        "# Get available moves\n",
        "def available_moves(board):\n",
        "    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == EMPTY]\n",
        "\n",
        "# Minimax algorithm with Alpha-Beta Pruning\n",
        "def minimax(board, depth, is_maximizing, alpha, beta):\n",
        "    # Check if the game is over\n",
        "    if check_win(board, PLAYER_X):\n",
        "        return -10 + depth\n",
        "    if check_win(board, PLAYER_O):\n",
        "        return 10 - depth\n",
        "    if is_full(board):\n",
        "        return 0\n",
        "\n",
        "    # Maximizing player (AI)\n",
        "    if is_maximizing:\n",
        "        max_eval = float('-inf')\n",
        "        for move in available_moves(board):\n",
        "            board[move[0]][move[1]] = PLAYER_O\n",
        "            eval = minimax(board, depth + 1, False, alpha, beta)\n",
        "            board[move[0]][move[1]] = EMPTY\n",
        "            max_eval = max(max_eval, eval)\n",
        "            alpha = max(alpha, eval)\n",
        "            if beta <= alpha:\n",
        "                break\n",
        "        return max_eval\n",
        "    # Minimizing player (Human)\n",
        "    else:\n",
        "        min_eval = float('inf')\n",
        "        for move in available_moves(board):\n",
        "            board[move[0]][move[1]] = PLAYER_X\n",
        "            eval = minimax(board, depth + 1, True, alpha, beta)\n",
        "            board[move[0]][move[1]] = EMPTY\n",
        "            min_eval = min(min_eval, eval)\n",
        "            beta = min(beta, eval)\n",
        "            if beta <= alpha:\n",
        "                break\n",
        "        return min_eval\n",
        "\n",
        "# AI's best move using minimax with Alpha-Beta Pruning\n",
        "def best_move(board):\n",
        "    best_score = float('-inf')\n",
        "    move = None\n",
        "    for i, j in available_moves(board):\n",
        "        board[i][j] = PLAYER_O\n",
        "        score = minimax(board, 0, False, float('-inf'), float('inf'))\n",
        "        board[i][j] = EMPTY\n",
        "        if score > best_score:\n",
        "            best_score = score\n",
        "            move = (i, j)\n",
        "    return move\n",
        "\n",
        "# Function to play the game\n",
        "def play_game():\n",
        "    board = [[EMPTY] * 3 for _ in range(3)]\n",
        "    print_board(board)\n",
        "\n",
        "    while True:\n",
        "        # Human's turn (X)\n",
        "        print(\"Your turn (X):\")\n",
        "        human_move = None\n",
        "        while human_move not in available_moves(board):\n",
        "            try:\n",
        "                row, col = map(int, input(\"Enter row and column (0, 1, 2): \").split())\n",
        "                human_move = (row, col)\n",
        "            except ValueError:\n",
        "                print(\"Invalid input. Please enter row and column as two numbers between 0 and 2.\")\n",
        "        board[human_move[0]][human_move[1]] = PLAYER_X\n",
        "        print_board(board)\n",
        "\n",
        "        if check_win(board, PLAYER_X):\n",
        "            print(\"You win!\")\n",
        "            break\n",
        "        if is_full(board):\n",
        "            print(\"It's a tie!\")\n",
        "            break\n",
        "\n",
        "        # AI's turn (O)\n",
        "        print(\"AI's turn (O):\")\n",
        "        ai_move = best_move(board)\n",
        "        board[ai_move[0]][ai_move[1]] = PLAYER_O\n",
        "        print_board(board)\n",
        "\n",
        "        if check_win(board, PLAYER_O):\n",
        "            print(\"AI wins!\")\n",
        "            break\n",
        "        if is_full(board):\n",
        "            print(\"It's a tie!\")\n",
        "            break\n",
        "\n",
        "# Start the game\n",
        "if __name__ == \"__main__\":\n",
        "    play_game()\n"
      ]
    }
  ]
}
