{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPxQtvmRew3/n48IOg9mILu",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sumathi-chennuri/CODSOFT/blob/main/TASK_3\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install scikit-surprise"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OnwK88N3OQ9t",
        "outputId": "0d7004ba-9f6c-4dc1-bd94-fa58e64f1953"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting scikit-surprise\n",
            "  Downloading scikit_surprise-1.1.4.tar.gz (154 kB)\n",
            "\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/154.4 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m154.4/154.4 kB\u001b[0m \u001b[31m5.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n",
            "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-surprise) (1.4.2)\n",
            "Requirement already satisfied: numpy>=1.19.5 in /usr/local/lib/python3.11/dist-packages (from scikit-surprise) (1.26.4)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-surprise) (1.13.1)\n",
            "Building wheels for collected packages: scikit-surprise\n",
            "  Building wheel for scikit-surprise (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for scikit-surprise: filename=scikit_surprise-1.1.4-cp311-cp311-linux_x86_64.whl size=2505179 sha256=dc9af2b66a508d3a576e90e4f5756e7a256d2b62be415aea5426d08cec299c19\n",
            "  Stored in directory: /root/.cache/pip/wheels/2a/8f/6e/7e2899163e2d85d8266daab4aa1cdabec7a6c56f83c015b5af\n",
            "Successfully built scikit-surprise\n",
            "Installing collected packages: scikit-surprise\n",
            "Successfully installed scikit-surprise-1.1.4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import required libraries:\n",
        "import pandas as pd\n",
        "from surprise import Dataset, Reader, KNNBasic\n",
        "from surprise.model_selection import train_test_split\n",
        "from surprise import accuracy\n"
      ],
      "metadata": {
        "id": "SDIVooeDOj2b"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install joblib>=1.0.0"
      ],
      "metadata": {
        "id": "IqcQZxwmOoCu"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Oj-YaAlEOsrY",
        "outputId": "ecfd50a5-9d38-438b-847e-9676aa470b19"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "file_path_1 = '/content/movies.csv'\n",
        "file_path_2 = '/content/ratings.csv'"
      ],
      "metadata": {
        "id": "2EmD8L7JOs9e"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load the data from the MovieLens dataset\n",
        "movies = pd.read_csv(file_path_1)\n",
        "ratings = pd.read_csv(file_path_2)"
      ],
      "metadata": {
        "id": "q3tRp7GNOxS2"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a Surprise Dataset\n",
        "reader = Reader(rating_scale=(0.5, 5))\n",
        "data = Dataset.load_from_df(ratings[['userId', 'movieId', 'rating']], reader)"
      ],
      "metadata": {
        "id": "gIN4clETOzdo"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Split the data into training and testing sets\n",
        "trainset, testset = train_test_split(data, test_size=0.2)\n"
      ],
      "metadata": {
        "id": "jxkwT9wgO1-W"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Build a user-based collaborative filtering model\n",
        "sim_options = {\n",
        "    'name': 'cosine',\n",
        "    'user_based': True,\n",
        "}\n",
        "model = KNNBasic(sim_options=sim_options)\n",
        "model.fit(trainset)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FHMZpyAfO5DX",
        "outputId": "acb7c34a-9616-4207-cfc7-f5814b8cb6d1"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Computing the cosine similarity matrix...\n",
            "Done computing similarity matrix.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<surprise.prediction_algorithms.knns.KNNBasic at 0x7bfec88f3a10>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Make predictions on the test set\n",
        "predictions = model.test(testset)\n",
        "\n",
        "# Evaluate the model's performance\n",
        "rmse = accuracy.rmse(predictions)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QfdbODsdPC0T",
        "outputId": "ba46a877-eba7-4e44-9832-0bccfbef80dc"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE: 0.9698\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to recommend movies for a given user\n",
        "def recommend_movies(user_id, n=10):\n",
        "    movies_watched = ratings[ratings['userId'] == user_id]['movieId'].tolist()\n",
        "    unrated_movies = movies[~movies['movieId'].isin(movies_watched)]\n",
        "\n",
        "    recommendations = []\n",
        "    for movie_id in unrated_movies['movieId']:\n",
        "        predicted_rating = model.predict(user_id, movie_id).est\n",
        "        recommendations.append((movie_id, predicted_rating))\n",
        "\n",
        "    recommendations.sort(key=lambda x: x[1], reverse=True)\n",
        "    top_n_recommendations = recommendations[:n]\n",
        "\n",
        "    recommended_movies = movies[movies['movieId'].isin([movie[0] for movie in top_n_recommendations])]\n",
        "    return recommended_movies[['movieId', 'title']]"
      ],
      "metadata": {
        "id": "XqE0XcPcPK_X"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Function to recommend movies for a given user\n",
        "def recommend_movies(user_id, n=10):\n",
        "    movies_watched = ratings[ratings['userId'] == user_id]['movieId'].tolist()\n",
        "    unrated_movies = movies[~movies['movieId'].isin(movies_watched)]\n",
        "\n",
        "    recommendations = []\n",
        "    for movie_id in unrated_movies['movieId']:\n",
        "        predicted_rating = model.predict(user_id, movie_id).est\n",
        "        recommendations.append((movie_id, predicted_rating))\n",
        "\n",
        "    recommendations.sort(key=lambda x: x[1], reverse=True)\n",
        "    top_n_recommendations = recommendations[:n]\n",
        "\n",
        "    recommended_movies = movies[movies['movieId'].isin([movie[0] for movie in top_n_recommendations])]\n",
        "    return recommended_movies[['movieId', 'title']]"
      ],
      "metadata": {
        "id": "jtEtP2AyPM1P"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Example_2:\n",
        "user_id = 5\n",
        "recommended_movies = recommend_movies(user_id, n=10)\n",
        "print(f\"Top 10 recommended movies for User {user_id}:\")\n",
        "print(recommended_movies)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W0JmyVNBPOqv",
        "outputId": "1206fb66-b681-4400-a2b3-8e8bf2bc6bb0"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top 10 recommended movies for User 5:\n",
            "     movieId                                              title\n",
            "48        53                                    Lamerica (1994)\n",
            "87        99               Heidi Fleiss: Hollywood Madam (1995)\n",
            "121      148                   Awfully Big Adventure, An (1995)\n",
            "259      299                                      Priest (1994)\n",
            "405      467                             Live Nude Girls (1995)\n",
            "432      495  In the Realm of the Senses (Ai no corrida) (1976)\n",
            "433      496                        What Happened Was... (1994)\n",
            "441      506                                     Orlando (1992)\n",
            "536      633                             Denise Calls Up (1995)\n",
            "750      984                       Pompatus of Love, The (1996)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Example_3:\n",
        "user_id = 10\n",
        "recommended_movies = recommend_movies(user_id, n=5)\n",
        "print(f\"Top 5 recommended movies for User {user_id}:\")\n",
        "print(recommended_movies)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nxlViVpVPQzc",
        "outputId": "67e067eb-1d8a-488d-d6ec-8c4f34c34889"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Top 5 recommended movies for User 10:\n",
            "     movieId                                 title\n",
            "48        53                       Lamerica (1994)\n",
            "87        99  Heidi Fleiss: Hollywood Madam (1995)\n",
            "121      148      Awfully Big Adventure, An (1995)\n",
            "259      299                         Priest (1994)\n",
            "346      389            Colonel Chabert, Le (1994)\n"
          ]
        }
      ]
    }
  ]
}